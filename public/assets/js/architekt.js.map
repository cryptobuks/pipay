{"version":3,"sources":["architekt.js"],"names":[],"mappingsfile":"architekt.js","sourcesContent":["if (typeof String.prototype.utf8Encode == 'undefined') {\n    String.prototype.utf8Encode = function () {\n        return unescape(encodeURIComponent(this));\n    };\n}\nif (typeof String.prototype.utf8Decode == 'undefined') {\n    String.prototype.utf8Decode = function () {\n        try {\n            return decodeURIComponent(escape(this));\n        } catch (e) {\n            return this; // invalid UTF-8? return as-is\n        }\n    };\n}\n\n//Crossbrowsing event handler\nvar events = {\n\ton: function(target, type, func) {\n\t\tif(window.addEventListener) {\n\t\t\ttarget.addEventListener(type, func);\n\t\t}\n\t\telse {\n\t\t\ttype = type.toLowerCase();\n\t\t\tif(type.substr(0,2) !== 'on') type = 'on' + type;\n\t\t\ttarget.attachEvent(type, func);\n\t\t}\n\n        return this;\n\t},\n\toff: function(target, type) {\n\t\tif(window.removeEventHandler) {\n\t\t\ttarget.removeEventHandler(type);\n\t\t}\n\t\telse {\n\t\t\ttype = type.toLowerCase();\n\t\t\tif(type.substr(0,2) !== 'on') type = 'on' + type;\n\t\t\ttarget.detachEvent(type);\n\t\t}\n\n        return this;\n\t}\n};\n\n//Architekt 1.0 Lite: based Non-UIComponent, Modular Framework\nwindow.Architekt = new function ArchitektConstructor() {\n\tvar self = this;\n\n\t//Framework info\n    this.info = {\n        version: '1.0 Lite',\n    };\n\n\t//Device object: contain device info\n    this.device = {\n        width: 0,\n        height: 0,\n    };\n    //Object object: helpers for object\n    this.object = {\n        extend: function (source) {\n            var obj = Object.create(source);\n            return obj;\n        },\n        link: function(baseObject, derivedObject, paramsObject) {\n            baseObject.call(derivedObject, paramsObject);\n            return this;\n        },\n    };\n    //Array object: helpers for array\n    this.array = {\n        clone: function (arr) {\n            return arr.slice(0);\n        },\n    };\n\n    //Architekt.EventEmitter(): Create event attributes\n    this.EventEmitter = function (events) {\n        this.list = {};\n\n        if (typeof events === 'object' && events.length !== 'undefined')\n            for (var i = 0, len = events.length; i < len; i++) {\n                var eventName = events[i].toLowerCase();\n                if (eventName.substr(0, 2) !== 'on') eventName = 'on' + eventName;\n\n                this.list[eventName] = [];\n            }\n                \n        //Architekt.EventEmitter.on(string type, function func): Add event\n        this.on = function (type, func) {\n            type = type.toLowerCase();\n            if (type.substr(0, 2) !== 'on') type = 'on' + type;\n            \n            var _el = this.list[type];\n            if (typeof _el === \"undefined\")\n                throw new Error('Architekt.js: Unknown event ' + type);\n\n            _el.push(func);\n            return this;\n        };\n        //Architekt.EventEmitter.off(string type): Remove events\n        this.off = function (type) {\n            type = type.toLowerCase();\n            if (type.substr(0, 2) !== 'on') type = 'on' + type;\n\n            var _el = this.list[type];\n            if (typeof _el === \"undefined\")\n                throw new Error('Architekt.js: Unknown event ' + type);\n\n            _el = [];\n            return this;\n        };\n        //Architekt.EventEmitter.fire(string type, object eventArgument): Fire event\n        this.fire = function (type, eventArgument) {\n            type = type.toLowerCase();\n            if (type.substr(0, 2) !== 'on') type = 'on' + type;\n\n            var _el = this.list[type];\n            if (typeof _el === \"undefined\")\n                throw new Error('Architekt.js: Unknown event ' + type);\n\n            for (var i = 0, len = _el.length; i < len; i++) _el[i](eventArgument);\n            return this;\n        };\n    };\n\n    //Architekt.loadScript(string url, function callback): Load JavaScript Async\n    this.loadScript = function(url, callback) {\n        var _h = document.getElementsByTagName('head')[0];\n        var _s = document.createElement('script');\n        _s.type = 'text/javascript';\n        _s.src = url;\n\n        _s.addEventListener('readystatechange', callback);\n        _s.addEventListener('load', callback);\n        _s.addEventListener('error', function () {\n            throw new Error('Failed to load script: ' + url);\n        });\n\n        _h.appendChild(_s);\n        return this;\n    };\n    \n    //Architekt.module.loadCSS(string url, function callback): Load a stylesheet\n    //Architekt.module.loadCSS(array url, function callback): Load stylesheets\n    this.loadCSS = function(url, callback) {\n        callback = typeof callback === 'function' ? callback : function () { };\n\n        function _loadCSS(url, callback) {\n            var _h = document.getElementsByTagName('head')[0];\n            var _s = document.createElement('link');\n            _s.setAttribute('rel', 'stylesheet');\n            _s.setAttribute('href', url);\n\n            _s.addEventListener('readystatechange', callback);\n            _s.addEventListener('load', callback);\n            _s.addEventListener('error', function () {\n                throw new Error('Failed to load css: ' + url);\n            });\n\n            _h.appendChild(_s);\n        }\n\n        var _loaded = 0, _num = 0;\n\n        if (typeof url === 'object' && typeof url.length !== 'undefined') {\n            _loaded = 0;\n            _num = url.length;\n\n            if (_num === 0) {\n                callback();\n            }\n            else {\n                for (var i = 0; i < _num; i++) {\n                    _loadCSS(url[i], function () {\n                        console.log('Architekt.js: Stylesheet loaded ' + url[_loaded]);\n\n                        if (++_loaded >= _num) {\n                            callback();\n                        }\n                    });\n                }\n            }\n        }\n        else {\n            _loadCSS(url, function () {\n                console.log('Architekt.js: Stylesheet mounted ' + url);\n                callback();\n            });\n        }\n        \n        return this;\n    };\n\n    //Modular\n    var reserved = {};\n    this.module = {\n        //Architekt.module.load(string url, function callback): Load a module\n        //Architekt.module.load(array url, function callback): Load modules\n        load: function(url, callback) {\n            callback = typeof callback === 'function' ? callback : function () { };\n\n            var _loaded = 0, _num = 0;\n            \n            if (typeof url === 'object' && typeof url.length !== 'undefined') {\n                _loaded = 0;\n                _num = url.length;\n                \n                if (_num === 0) {\n                    callback();\n                }\n                else {\n                    for (var i = 0; i < _num; i++) {\n                        Architekt.loadScript(url[i], function () {\n                            console.log('Architekt.js: Module mounted ' + url[_loaded]);\n\n                            if (++_loaded >= _num) {\n                                callback();\n                            }\n                        });\n                    }\n                }\n            }\n            else {\n                Architekt.loadScript(url, function () {\n                    console.log('Architekt.js: Module mounted ' + url);\n                    callback();\n                });    \n            }\n            \n            return this;\n        },\n        //Architekt.module.mount(string moduleName, function moduleConstructor): Mount a module\n        mount: function (moduleName, moduleConstructor) {\n            if (typeof this[moduleName] !== 'undefined') throw new Error(moduleName + ' Module already mounted.');\n            this[moduleName] = new moduleConstructor();\n            return this;\n        },\n        //Architekt.module.reserv(string moduleName, function moduleConstructor): Reserv a module\n        //Note that reserved modules are loaded after onmodulesready\n        reserv: function(moduleName, moduleConstructor) {\n        \tif (typeof reserved[moduleName] !== 'undefined') throw new Error(moduleName + ' Module already reserved.');\n        \treserved[moduleName] = moduleConstructor;\n        \treturn this;\n        },\n    };\n\n\n    //Architekt.setGPUAcceleration(domElement target): Add GPU Acceleration(only works with Webkit based browser)\n    this.setGPUAcceleration = function (target) {\n        target.style.transform = 'translateZ(0)';\n        target.style.webkitTransform = 'translateZ(0);'\n        target.style.msTransform = 'translateZ(0);'\n        target.style.MozTransform = 'translateZ(0);'\n        target.style.OTransform = 'translateZ(0);'\n        \n        //Repeating twice: There is a f**king but with just adding style. I spend lots of time to solve this, but gave up. F**k it.\n        target.style.transform = 'translateZ(0)';\n        target.style.webkitTransform = 'translateZ(0);'\n        target.style.msTransform = 'translateZ(0);'\n        target.style.MozTransform = 'translateZ(0);'\n        target.style.OTransform = 'translateZ(0);'\n        return this;\n    };\n\n\t//Architekt.init(): Init Architekt\n\tthis.init = function() {\n\t\t//Load reservated modules\n\t\tsetTimeout(function() {\n\t\t\tfor(var moduleName in reserved) {\n\t\t\t\tArchitekt.module.mount(moduleName, reserved[moduleName]);\n\t\t\t}\n\n            console.log('Architekt.js: Ready to go.');\n            console.log(JSON.stringify(self.info));\n\n\t\t\tArchitekt.event.fire('onready');\n\t\t}, 0);\n\t};\n\n\t//Event definitions\n    this.event = new this.EventEmitter([ 'onready', 'onresize', 'onscroll', 'onmodulesloaded', 'onpreparing' ]);\n};\n\n//Make Architekt load when window loaded\nevents.on(window, 'load', function() {\n    Architekt.device.width = window.innerWidth;\n    Architekt.device.height = window.innerHeight;\n\n    Architekt.event.fire('onpreparing');\n\tArchitekt.init();\n}).on(window, 'resize', function(e) {\n    Architekt.device.width = window.innerWidth;\n    Architekt.device.height = window.innerHeight;\n\n    Architekt.event.fire('resize', e);\n}).on(window, 'scroll', function(e) {\n    Architekt.event.fire('scroll', e);\n});"],"sourceRoot":"/source/"}