{"version":3,"sources":["architekt.js"],"names":[],"mappingsfile":"architekt.js","sourcesContent":["if (typeof String.prototype.utf8Encode == 'undefined') {\n    String.prototype.utf8Encode = function () {\n        return unescape(encodeURIComponent(this));\n    };\n}\nif (typeof String.prototype.utf8Decode == 'undefined') {\n    String.prototype.utf8Decode = function () {\n        try {\n            return decodeURIComponent(escape(this));\n        } catch (e) {\n            return this; // invalid UTF-8? return as-is\n        }\n    };\n}\n\n//Crossbrowsing event handler\nvar events = {\n\ton: function(target, type, func) {\n\t\tif(window.addEventListener) {\n\t\t\ttarget.addEventListener(type, func);\n\t\t}\n\t\telse {\n\t\t\ttype = type.toLowerCase();\n\t\t\tif(type.substr(0,2) !== 'on') type = 'on' + type;\n\t\t\ttarget.attachEvent(type, func);\n\t\t}\n\n        return this;\n\t},\n\toff: function(target, type) {\n\t\tif(window.removeEventHandler) {\n\t\t\ttarget.removeEventHandler(type);\n\t\t}\n\t\telse {\n\t\t\ttype = type.toLowerCase();\n\t\t\tif(type.substr(0,2) !== 'on') type = 'on' + type;\n\t\t\ttarget.detachEvent(type);\n\t\t}\n\n        return this;\n\t}\n};\n\n//Architekt 1.0 Lite: based Non-UIComponent, Modular Framework\nwindow.Architekt = new function ArchitektConstructor() {\n\tvar self = this;\n\n\t//Framework info\n    this.info = {\n        version: '1.0 Lite',\n    };\n\n\t//Device object: contain device info\n    this.device = {\n        width: 0,\n        height: 0,\n    };\n    //Object object: helpers for object\n    this.object = {\n        extend: function (source) {\n            var obj = Object.create(source);\n            return obj;\n        },\n        link: function(baseObject, derivedObject, paramsObject) {\n            baseObject.call(derivedObject, paramsObject);\n            return this;\n        },\n    };\n    //Array object: helpers for array\n    this.array = {\n        clone: function (arr) {\n            return arr.slice(0);\n        },\n    };\n\n    //Media object\n    this.media = new function () {\n        //Architekt.media.Image()\n        this.Image = function (options) {\n            var self = this;\n\n            options = typeof options === 'object' ? options : {};\n            this.src = typeof options.src !== 'undefined' ? options.src : false;\n\n            //Make events\n            this.event = new Architekt.EventEmitter(['load']);\n\n            this.data = new Image();\n            this.data.src = this.src;\n            this.data.addEventListener('load', function () {\n                self.event.fire('load');\n            });\n        };\n        this.Image.prototype.reload = function () {\n            var self = this;\n\n            this.data.removeEventListener('load');\n\n            this.data = new Image();\n            this.data.src = this.src;\n            this.data.addEventListener('load', function () {\n                self.event.fire('load');\n            });\n            return this;\n        };\n        //Architekt.media.Audio()\n        this.Audio = function (options) {\n            var self = this;\n\n            options = typeof options === 'object' ? options : {};\n            this.src = typeof options.src !== 'undefined' ? options.src : false;\n            this.playable = false;\n\n            //Make events\n            this.event = new Architekt.EventEmitter(['load','ended']);\n\n            this._loadFired = false;\n\n            this.data = new Audio();\n            this.data.src = this.src;\n            this.data.addEventListener('canplaythrough', function () {\n                this.playable = true;\n\n                if (self._loadFired) return false;\n                self._loadFired = true;\n                self.event.fire('load');\n            });\n            this.data.addEventListener('ended', function () {\n                self.event.fire('ended');\n            });\n        };\n        this.Audio.prototype.reload = function () {\n            var self = this;\n\n            this.data.removeEventListener('canplaythrough');\n            this.data.removeEventListener('ended');\n            this.playable = false;\n\n            this.data = new Audio();\n            this.data.src = this.src;\n            this.data.addEventListener('canplaythrough', function () {\n                this.playable = true;\n\n                if (self._loadFired) return false;\n                self._loadFired = true;\n                self.event.fire('load');\n            });\n            this.data.addEventListener('ended', function () {\n                self.event.fire('ended');\n            });\n            return this;\n        }\n        this.Audio.prototype.play = function () {\n            this.data.play();\n            return this;\n        };\n        this.Audio.prototype.pause = function () {\n            this.data.pause();\n            return this;\n        };\n        this.Audio.prototype.stop = function () {\n            this.data.currentTime = 0;\n            this.data.pause();\n            return this;\n        };\n    };\n\n    //Architekt.EventEmitter(): Create event attributes\n    this.EventEmitter = function (events) {\n        var self = this;\n        this.list = {};\n\n        if (typeof events === 'object' && events.length !== 'undefined')\n            for (var i = 0, len = events.length; i < len; i++) {\n                var eventName = events[i].toLowerCase();\n                if (eventName.substr(0, 2) !== 'on') eventName = 'on' + eventName;\n\n                this.list[eventName] = [];\n            }\n\n        //add basic events\n        (function addBasicEvents() {\n            //Error event for error handling while firing event\n            self.list.onerror = [];\n        })();\n\n        //normalize event name: if name doen't have 'on', attach it at front.\n        function normalize(eventName) {\n            eventName = eventName.toLowerCase() || eventName;\n            if (eventName.substr(0, 2) !== 'on') eventName = 'on' + eventName;\n\n            return eventName;\n        };\n                \n        //Architekt.EventEmitter.on(string type, function func): Add event\n        this.on = function (type, func) {\n            type = normalize(type);\n            \n            var _el = this.list[type];\n            if (typeof _el === \"undefined\")\n                throw new Error('Architekt.js: Unknown event ' + type);\n\n            _el.push(func);\n            return this;\n        };\n        //Architekt.EventEmitter.off(string type): Remove events\n        this.off = function (type) {\n            type = normalize(type);\n\n            var _el = this.list[type];\n            if (typeof _el === \"undefined\")\n                throw new Error('Architekt.js: Unknown event ' + type);\n\n            _el = [];\n            return this;\n        };\n        //Architekt.EventEmitter.fire(string type, object eventArgument): Fire event\n        this.fire = function (type, eventArgument) {\n            type = normalize(type);\n\n            var _el = this.list[type];\n\n            if (typeof _el === \"undefined\")\n                throw new Error('Architekt.js: Unknown event ' + type);\n\n            //fire event\n            for (var i = 0, len = _el.length; i < len; i++) {\n                try {\n                    _el[i](eventArgument);\n                }\n                catch(error) {\n                    if(typeof error === 'object')\n                        console.error(error.stack);\n                    else\n                        console.error(error);\n\n                    //fire error event\n                    this.fire('onerror', error);\n                }\n            }\n\n            return this;\n        };\n        //Architekt.EventEmitter.trigger(string type, object eventArgument): Alias of EventEmitter.fire\n        this.trigger = function(type, eventArgument) {\n            return this.fire(type, eventArgument);\n        };\n        //Architekt.EventEmitter.register(string eventName): Add new event\n        this.register = function(eventName) {\n            eventName = normalize(eventName);\n\n            if(typeof this.list[eventName] !== 'undefined')\n                throw new Error('Architekt.js: Failed register event ' + eventName + '. Event already exists.');\n\n            this.list[eventName] = [];\n            return this;\n        };\n        //Architekt.EventEmitter.unregister(string eventName): Remove event\n        this.unregister = function(eventName) {\n            eventName = normalize(eventName);\n\n            if(typeof this.list[eventName] === 'undefined')\n                throw new Error('Architekt.js: Failed unregister event ' + eventName + '. Event does not exists.');\n\n            delete this.list[eventName];\n            return this;\n        };\n    };\n\n    //Architekt.loadScript(string url, function callback): Load JavaScript Async\n    this.loadScript = function(url, callback) {\n        var _h = document.getElementsByTagName('head')[0];\n        var _s = document.createElement('script');\n        _s.type = 'text/javascript';\n        _s.src = url;\n\n        _s.addEventListener('readystatechange', callback);\n        _s.addEventListener('load', callback);\n        _s.addEventListener('error', function () {\n            throw new Error('Failed to load script: ' + url);\n        });\n\n        _h.appendChild(_s);\n        return this;\n    };\n    \n    //Architekt.module.loadCSS(string url, function callback): Load a stylesheet\n    //Architekt.module.loadCSS(array url, function callback): Load stylesheets\n    this.loadCSS = function(url, callback) {\n        callback = typeof callback === 'function' ? callback : function () { };\n\n        function _loadCSS(url, callback) {\n            var _h = document.getElementsByTagName('head')[0];\n            var _s = document.createElement('link');\n            _s.setAttribute('rel', 'stylesheet');\n            _s.setAttribute('href', url);\n\n            _s.addEventListener('readystatechange', callback);\n            _s.addEventListener('load', callback);\n            _s.addEventListener('error', function () {\n                throw new Error('Failed to load css: ' + url);\n            });\n\n            _h.appendChild(_s);\n        }\n\n        var _loaded = 0, _num = 0;\n\n        if (typeof url === 'object' && typeof url.length !== 'undefined') {\n            _loaded = 0;\n            _num = url.length;\n\n            if (_num === 0) {\n                callback();\n            }\n            else {\n                for (var i = 0; i < _num; i++) {\n                    _loadCSS(url[i], function () {\n                        console.log('Architekt.js: Stylesheet loaded ' + url[_loaded]);\n\n                        if (++_loaded >= _num) {\n                            callback();\n                        }\n                    });\n                }\n            }\n        }\n        else {\n            _loadCSS(url, function () {\n                console.log('Architekt.js: Stylesheet mounted ' + url);\n                callback();\n            });\n        }\n        \n        return this;\n    };\n\n    //Modular\n    var reservedModules = {};\n    var moduleList = [];\n    var modulesLoaded = 0;\n    var modulesMounted = 0;\n\n    //function for wait and load dependency module\n    function loadDependencyModule(moduleObject) {\n        var deps = moduleObject.deps;\n        var loaded = 0;\n\n        //loop and check dependencies are loaded\n        //this loop is looping dependency list\n        for(var i = 0, len = deps.length; i < len; i++) {\n            var dependency = deps[i];\n\n            //this loop is looping loaded modules\n            for(var j = 0, lenModules = moduleList.length; j < lenModules; j++) {\n                if(dependency === moduleList[j].name) {\n                    loaded++;\n                    break;\n                }\n            }\n        }\n\n        //if all modules loaded, actually mount\n        if(loaded >= deps.length) {\n            mountModule(moduleObject);\n        }\n        //else, wait more 10 ms.\n        else {\n            setTimeout(function() {\n                loadDependencyModule(moduleObject);\n            }, 10);\n        }\n    };\n    function mountModule(moduleObject) {\n        var name = moduleObject.name;\n        var version = moduleObject.version;\n        var deps = moduleObject.deps;\n        var moduleConstructor = moduleObject.moduleConstructor;\n\n        Architekt.module[name] = new moduleConstructor();\n\n        moduleList.push({\n            name: name,\n            version: version,\n            deps: deps,\n        });\n\n        modulesMounted++;\n\n        if(modulesMounted >= modulesLoaded) {\n            console.log('Architekt.js: Ready to go.');\n            console.log(JSON.stringify(self.info));\n\n            Architekt.event.fire('onready');\n        }\n    }\n\n    this.module = {\n        //Architekt.module.load(string url, function callback): Load a module\n        //Architekt.module.load(array url, function callback): Load modules\n        load: function(url, callback) {\n            callback = typeof callback === 'function' ? callback : function () { };\n\n            var _loaded = 0, _num = 0;\n            \n            if (typeof url === 'object' && typeof url.length !== 'undefined') {\n                _loaded = 0;\n                _num = url.length;\n                \n                if (_num === 0) {\n                    modulesLoaded = 0;\n                    callback();\n                }\n                else {\n                    modulesLoaded = _num;\n\n                    for (var i = 0; i < _num; i++) {\n                        Architekt.loadScript(url[i], function () {\n                            console.log('Architekt.js: Module mounted ' + url[_loaded]);\n\n                            if (++_loaded >= _num) {\n                                callback();\n                            }\n                        });\n                    }\n                }\n            }\n            else {\n                modulesLoaded++;\n                \n                Architekt.loadScript(url, function () {\n                    console.log('Architekt.js: Module mounted ' + url);\n                    callback();\n                });    \n            }\n            \n            return this;\n        },\n        //Architekt.module.mount(string moduleName, function moduleConstructor): Mount a module\n        //Architekt.module.mount(object moduleInfo, function moduleConstructor): Mount a module with specified info\n        mount: function (moduleInfo, moduleConstructor) {\n            //if first argument is string, it means it is name of the module.\n            if(typeof moduleInfo === 'string') {\n                var moduleName = moduleInfo;\n\n                if (typeof this[moduleName] !== 'undefined')\n                    throw new Error(moduleName + ' Module already mounted.');\n\n                mountModule({\n                    name: moduleName,\n                    version: 0,\n                    deps: [],\n                    moduleConstructor: moduleConstructor,\n                });\n            }\n            //if first argument is object, it contains module info\n            else if(typeof moduleInfo === 'object') {\n                var moduleName = moduleInfo.name || '';\n                var moduleVersion = moduleInfo.version || '';\n                var dependencies = moduleInfo.deps || [];\n\n                if (typeof this[moduleName] !== 'undefined')\n                    throw new Error(moduleName + ' module already mounted.');\n\n                //is module has dependencies?\n                if(dependencies.length > 0) {\n                    loadDependencyModule({\n                        name: moduleName,\n                        version: moduleVersion,\n                        deps: dependencies,\n                        moduleConstructor: moduleConstructor,\n                    });\n                }\n                //else, just load\n                else {\n                    mountModule({\n                        name: moduleName,\n                        version: moduleVersion,\n                        deps: dependencies,\n                        moduleConstructor: moduleConstructor,\n                    });\n                }\n            }\n            else {\n                throw new Error('Architekt.js: tried unsupported module mounting. first argument must be string or object.');\n            }\n\n            return this;\n        },\n        //Architekt.module.reserv(string moduleName, function moduleConstructor): Reserv a module\n        //Architekt.module.reserv(object moduleInfo, function moduleConstructor): Reserv a module with specified info\n        reserv: function(moduleInfo, moduleConstructor) {\n            var moduleName;\n\n            if(typeof moduleInfo === 'string') {\n                moduleName = moduleInfo;\n            }\n            else if(typeof moduleInfo === 'object') {\n                if(typeof moduleInfo.name !== 'undefined')\n                    moduleName = moduleInfo.name;\n                else\n                    throw new Error('Architekt.js: moduleInfo object must contains module name.');\n            }\n            else\n                throw new Error('Architekt.js: tried unsupported module mounting. first argument must be string or object.');\n\n        \treservedModules[moduleName] = {\n                moduleInfo: moduleInfo,\n                moduleConstructor: moduleConstructor,\n            };\n        \treturn this;\n        },\n    };\n\n\n    //Architekt.setGPUAcceleration(domElement target): Add GPU Acceleration(only works with Webkit based browser)\n    this.setGPUAcceleration = function (target) {\n        target.style.transform = 'translateZ(0)';\n        target.style.webkitTransform = 'translateZ(0);'\n        target.style.msTransform = 'translateZ(0);'\n        target.style.MozTransform = 'translateZ(0);'\n        target.style.OTransform = 'translateZ(0);'\n        \n        //Repeating twice: There is a f**king but with just adding style. I spend lots of time to solve this, but gave up. F**k it.\n        target.style.transform = 'translateZ(0)';\n        target.style.webkitTransform = 'translateZ(0);'\n        target.style.msTransform = 'translateZ(0);'\n        target.style.MozTransform = 'translateZ(0);'\n        target.style.OTransform = 'translateZ(0);'\n        return this;\n    };\n\n\t//Architekt.init(): Init Architekt\n\tthis.init = function() {\n\t\t//Load reservated modules\n\t\tsetTimeout(function() {\n            //count how many modules\n            for(var key in reservedModules) \n                modulesLoaded++;\n\n\t\t\tfor(var key in reservedModules) {\n\t\t\t\tArchitekt.module.mount(reservedModules[key].moduleInfo, reservedModules[key].moduleConstructor);\n\t\t\t}\n\t\t}, 0);\n\t};\n\n\t//Event definitions\n    this.event = new this.EventEmitter([ 'onready', 'onresize', 'onscroll', 'onpreparing' ]);\n};\n\n//Make Architekt load when window loaded\nevents.on(window, 'load', function() {\n    Architekt.device.width = window.innerWidth;\n    Architekt.device.height = window.innerHeight;\n\n    Architekt.event.fire('onpreparing');\n\tArchitekt.init();\n}).on(window, 'resize', function(e) {\n    Architekt.device.width = window.innerWidth;\n    Architekt.device.height = window.innerHeight;\n\n    Architekt.event.fire('onresize', e);\n}).on(window, 'scroll', function(e) {\n    Architekt.event.fire('onscroll', e);\n}).on(window, 'error', function(err) {\n    var extra = !err.error ? '' : '' + err.error;\n    extra += !err.lineno ? '' : ' at ' + err.filename + ' Line ' + err.lineno;\n\n    console.error(extra);\n    Architekt.event.fire('onerror', err);\n\n    err.preventDefault();\n    err.stopPropagation();\n    err.stopImmediatePropagation();\n    return false;\n});"],"sourceRoot":"/source/"}