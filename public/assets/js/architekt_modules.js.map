{"version":3,"sources":["printer.js","locale.js","widget.js","comparator.js"],"names":[],"mappingsnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"architekt_modules.js","sourcesContent":["/****************************************************************************************************\n *\n *      Architekt.module.Printer: Debugging helper for Architekt\n *      Logging levels:\n *      - 0: Log everything\n *      - 1: Do not show Error\n *      - 2: Do not show Error and Warning\n *      - 3: No log\n *\n ****************************************************************************************************/\n\nArchitekt.module.reserv('Printer', function(options) {\n\tvar logLevel = 0;\t//Default lvl is 0\n\tvar printDate = false;\n\n\t//getDate(): Return date part string\n\tfunction getDate(dateObj) {\n\t\treturn (dateObj.getFullYear() + \"-\" + (\"0\" + (dateObj.getMonth() + 1)).substr(0,2) + \"-\" + (\"0\" + dateObj.getDate()).substr(0,2));\n\t}\n\t//getTime(): Return time part string\n\tfunction getTime(dateObj) {\n\t\treturn ((\"0\" + dateObj.getHours()).substr(0,2) + \":\" + (\"0\" + dateObj.getMinutes()).substr(0,2) + \":\" + (\"0\" + dateObj.getSeconds()).substr(0,2));\n\t}\n\t//getFormattedDate(): Return actual formated date string\n\tfunction getFormatedDate() {\n\t\tvar date = new Date();\n\t\tvar printStr = (printDate ? getDate(date) + \" \" : \"\") + getTime(date);\n\n\t\treturn printStr;\n\t}\n\t//getDebugText(string type, string text): Return printing format [Date Type] Text -> [10:32:20 LOG] Helloworld\n\tfunction getDebugText(type, text) {\n\t\treturn \"[\" + getFormatedDate() + \" \" + type + \"] \" + text;\n\t}\n\n\treturn {\n\t\tsetLevel: function(newLevel) {\n\t\t\tnewLevel = +newLevel;\n\n\t\t\tif(isNaN(newLevel)) {\n\t\t\t\tconsole.log('Architekt.module.Printer: Unknown level ' + newLevel);\n\t\t\t\tnewLevel = 0;\n\t\t\t}\n\n\t\t\tswitch(newLevel) {\n\t\t\t\tcase 0:\n\t\t\t\tcase 1:\n\t\t\t\tcase 2:\n\t\t\t\tcase 3:\n\t\t\t\t\tnewLevel = newLevel;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: \n\t\t\t\t\tconsole.log('Architekt.module.Printer: Unknown level ' + newLevel);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlogLevel = newLevel;\n\t\t\tconsole.log('Architekt.module.Printer: Log level set to ' + newLevel);\n\t\t\treturn this;\n\t\t},\n\t\tgetLevel: function() {\n\t\t\treturn logLevel;\n\t\t},\n\t\tsetPrintDate: function(print) {\n\t\t\tprintDate = !!print;\n\t\t\treturn this;\n\t\t},\n\t\tgetPrintDate: function() {\n\t\t\treturn printDate;\n\t\t},\n\t\t//Architekt.module.Printer.log(string text): Log the text\n\t\tlog: function(text) {\n\t\t\tif(logLevel >= 3) return;\n\t\t\tconsole.log(getDebugText('LOG', text));\n\t\t},\n\t\t//Architekt.module.Printer.warn(string text): Log the text with warning\n\t\twarn: function(text) {\n\t\t\tif(logLevel >= 2) return;\n\t\t\tconsole.warn(getDebugText('WARN', text));\n\t\t},\n\t\t//Architekt.module.Printer.error(string text): Log the text with error\n\t\terror: function(text) {\n\t\t\tif(logLevel >= 1) return;\n\t\t\tconsole.error(getDebugText('ERR', text));\n\t\t},\n\t\t//Architekt.module.Printer.inspect(object obj, options): Inspect object properties\n\t\t//options:\n\t\t//int depth: Max tree level for search\n\t\t//array ignoreRegex: Array of the strings that ignore searching it.\n\t\tinspect: function(obj, options) {\n\t\t\tif(logLevel >= 3) return;\n\n\t\t\tif(typeof obj !== 'object') {\n\t\t\t\tconsole.log(getDebugText('INSPECT', 'Parameter obj is not a object.'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(getDebugText('INSPECT', obj.constructor.name));\n\n\t\t\t\toptions = typeof options === 'object' ? options : {};\n\n\t\t\t\tvar maxDepth = typeof options.maxDepth !== 'undefined' ? +options.maxDepth : false;\n\t\t\t\tvar ignoreRegex = typeof options.ignoreRegex !== 'undefined' ? options.ignoreRegex : false;\n\t\t\t\tvar displayFunctionCode = typeof options.displayFunctionCode !== 'undefined' ? !!options.displayFunctionCode : false;\n\t\t\t\tvar spaceBetween = 4;\n\t\t\t\tvar treeDepth = 0;\n\n\t\t\t\t//To increase perfomance, make regexp array in here\n\t\t\t\tvar ignoreList = [];\n\t\t\t\tfor(var i = 0, len = ignoreRegex.length; i < len; i++) ignoreList.push(new RegExp(ignoreRegex[i]));\n\n\t\t\t\t//function for get between space of the depth\n\t\t\t\tfunction _getSpaceBetween(depth) {\n\t\t\t\t\tvar spaceStr = '';\n\t\t\t\t\t//Depth * 4 blank spaces\n\t\t\t\t\tfor(var i = 0; i < ((depth + 1) * spaceBetween); i++) spaceStr += ' ';\n\n\t\t\t\t\treturn spaceStr;\n\t\t\t\t}\n\n\t\t\t\t//function that check the key is in the ignore list\n\t\t\t\tfunction _checkInIgnoreList(text) {\n\t\t\t\t\tfor(var i = 0, len = ignoreList.length; i < len; i++)\n\t\t\t\t\t\tif(ignoreList[i].test(text)) return true;\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//function for actual inspect object. it is recursive until property exists.\n\t\t\t\tfunction _inspectObject(targetObj, depth) {\n\t\t\t\t\t//Make space by depth of the object tree (space = depth * 4)\n\t\t\t\t\tvar bracketSpace = _getSpaceBetween(depth - 1);\n\t\t\t\t\tvar propertySpace = _getSpaceBetween(depth);\n\n\t\t\t\t\tconsole.log(bracketSpace + \"{\");\n\n\t\t\t\t\tfor(var key in targetObj) {\n\t\t\t\t\t\t//Make sure that property is not linked in Prototype\n\t\t\t\t\t\tif(targetObj.hasOwnProperty(key) && !_checkInIgnoreList(key)) {\n\t\t\t\t\t\t\t//If the property is typeof of object, increase depth and search\n\t\t\t\t\t\t\tif(typeof targetObj[key] === 'object') {\n\t\t\t\t\t\t\t\tconsole.log(propertySpace + '[' + (typeof targetObj[key]) + '] ' + key);\n\n\t\t\t\t\t\t\t\tif(maxDepth === false || (maxDepth && depth < maxDepth))\n\t\t\t\t\t\t\t\t\t_inspectObject(targetObj[key], (depth+1));\t//Recursive with inside of the object\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif(typeof targetObj[key] === 'function' && !displayFunctionCode) {\n\t\t\t\t\t\t\t\t\tconsole.log(propertySpace + '[' + (typeof targetObj[key]) + '] ' + key);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tconsole.log(propertySpace + '[' + (typeof targetObj[key]) + '] ' + key + \": \" + targetObj[key]);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.log(bracketSpace + \"}\");\n\t\t\t\t}\n\n\t\t\t\t_inspectObject(obj, 0);\n\t\t\t}\n\t\t}\n\t}\n});","Architekt.module.reserv('Locale', function(options) {\n\tvar namespace = this;\n\tvar currentLocale = 'ko';\n\tvar localeStrings = {\n\t\t\"ko\": {\n\n\t\t},\n\t\t\"en\": {\n\n\t\t},\n\t};\n\n\treturn {\n\t\t//Architekt.module.Locale.setLocale(string newLocale): Set new locale\n\t\tsetLocale: function(newLocale) {\n\t\t\t//If new locale is not supported, use english instead.\n\t\t\tif(typeof localeStrings[newLocale] === 'undefined') {\n\t\t\t\tcurrentLocale = 'en';\n\t\t\t\tconsole.warn('Architekt.module.Locale: [WARN] Unsupported locale ' + newLocale);\n\t\t\t}\n\t\t\telse\n\t\t\t\tcurrentLocale = newLocale;\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t//Architekt.module.Locale.getCurrentLocale(void): Get current locale\n\t\tgetCurrentLocale: function() {\n\t\t\treturn currentLocale;\n\t\t},\n\t\t//Architekt.module.Locale.getString(string key, object replacements): Get string\n\t\tgetString: function(key, replacements) {\n\t\t\tvar text = localeStrings[currentLocale][key];\n\n\t\t\tif(typeof text !== 'undefined') {\n\t\t\t\t//Replace the replacements\n\t\t\t\tif(typeof replacements === 'object') {\n\t\t\t\t\tfor(var key in replacements) {\n\t\t\t\t\t\tvar replacement = replacements[key];\n\t\t\t\t\t\ttext = text.replace(new RegExp(\"{\" + key + \"}\"), replacement);\t//Replace the text that has same replacement character\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\t//If locale string does not exists, just return the key\n\t\t\telse\n\t\t\t\treturn key;\n\t\t}\n\t};\n});","/* Widget Module */\nArchitekt.module.reserv('Widget', function(options) {\n\tvar body = $('body');\n\n\tvar defaultText = {\n\t\tok: 'Ok',\n\t\tconfirm: 'Confirm',\n\t\tclose: 'Close',\n\t\tcancel: 'Cancel',\n\t};\n\n\t//widgetBase constructor\n\tfunction widgetBase(options) {\n\t\toptions = typeof options === 'object' ? options : {};\n\t\tthis.text = typeof options.text !== 'undefined' ? options.text : '';\n\t\tthis.controlObject = null;\n\t\tthis.callback = typeof options.callback === 'function' ? options.callback : function() {};\n\t\tthis.noCallback = typeof options.noCallback === 'function' ? options.noCallback : function() {};\n\t\tthis.okText = typeof options.okText !== 'undefined' ? options.okText : defaultText.ok;\n\t\tthis.confirmText = typeof options.confirmText !== 'undefined' ? options.confirmText : defaultText.confirm;\n\t\tthis.closeText = typeof options.closeText !== 'undefined' ? options.closeText : defaultText.close;\n\t\tthis.cancelText = typeof options.cancelText !== 'undefined' ? options.cancelText : defaultText.cancel;\n\t}\n\twidgetBase.prototype.destruct = function() {\n\t\tthis.controlObject.remove();\n\t\tthis.controlObject = null;\n\t\treturn this;\n\t};\n\n\t//Architekt.module.Widget.Notice(): Create a Notice widget\n\tfunction Notice(options) {\n\t\tArchitekt.object.link(widgetBase, this, options);\t//Link widgetBase with argument options\n\n\t\tvar self = this;\n\n\t\tthis.controlObject = $('<div></div>').addClass('architekt-widget-background');\n\n\t\tvar container = $('<div></div>').addClass('architekt-widget-container').appendTo(this.controlObject);\t\n\t\tvar textObject = $('<p></p>').text(this.text).appendTo(container);\n\t\tvar buttonContainer = $('<div></div>').addClass('architekt-widget-buttonContainer').appendTo(container);\n\n\t\t$('<button></button>').addClass('architekt-widget-button architekt-theme-confirm').click(function() {\n\t\t\tself.callback();\n\t\t\tself.destruct();\n\t\t}).text(this.okText).appendTo(buttonContainer);\n\n\t\t//Append to body\n\t\tthis.controlObject.appendTo(body);\n\n\t\t//Fancy scale up animation\n\t\tsetTimeout(function() {\n\t\t\tcontainer.addClass('on');\n\t\t}, 25);\n\t}\n\tNotice.prototype = new widgetBase();\n\tNotice.prototype.constructor = Notice;\n\n\t//Architekt.module.Widget.Confirm(): Create a Confirm widget\n\tfunction Confirm(options) {\n\t\tArchitekt.object.link(widgetBase, this, options);\t//Link widgetBase with argument options\n\n\t\tvar self = this;\n\n\t\tthis.controlObject = $('<div></div>').addClass('architekt-widget-background');\n\n\t\tvar container = $('<div></div>').addClass('architekt-widget-container').appendTo(this.controlObject);\t\n\t\tvar textObject = $('<p></p>').text(this.text).appendTo(container);\n\t\tvar buttonContainer = $('<div></div>').addClass('architekt-widget-buttonContainer').appendTo(container);\n\n\t\t$('<button></button>').addClass('architekt-widget-button').click(function() {\n\t\t\tself.noCallback();\n\t\t\tself.destruct();\n\t\t}).text(this.closeText).appendTo(buttonContainer);\n\n\t\t$('<button></button>').addClass('architekt-widget-button architekt-theme-confirm').click(function() {\n\t\t\tself.callback();\n\t\t\tself.destruct();\n\t\t}).text(this.confirmText).appendTo(buttonContainer);\n\n\t\t//Append to body\n\t\tthis.controlObject.appendTo(body);\n\n\t\t//Fancy scale up animation\n\t\tsetTimeout(function() {\n\t\t\tcontainer.addClass('on');\n\t\t}, 25);\n\t}\n\tConfirm.prototype = new widgetBase();\n\tConfirm.prototype.constructor = Confirm;\n\n\treturn {\n\t\tNotice: Notice,\n\t\tConfirm: Confirm,\n\t\tsetDefaultText: function(newTexts) {\n\t\t\tif(typeof newTexts.ok !== 'undefined') defaultText.ok = newTexts.ok;\n\t\t\tif(typeof newTexts.confirm !== 'undefined') defaultText.confirm = newTexts.confirm;\n\t\t\tif(typeof newTexts.close !== 'undefined') defaultText.close = newTexts.close;\n\t\t\tif(typeof newTexts.cancel !== 'undefined') defaultText.cancel = newTexts.cancel;\n\t\t}\n\t};\n});","Architekt.module.reserv('Comparator', function(options) {\n\tvar results = [];\n\tvar texts = [];\n\tvar startTime = null;\n\tvar endTime = null;\n\n\treturn {\n\t\t//Architekt.module.Comparator.start(): Begins measuring\n\t\tstart: function() {\n\t\t\tresults = [];\n\t\t\ttexts = [];\n\t\t\tstartTime = new Date();\n\n\t\t\tresults.push(0);\n\t\t\ttexts.push('Begins');\n\t\t\tconsole.log('Architekt.module.Comparator: Start perfomance measuring at ' + startTime.toGMTString());\n\n\t\t\treturn this;\n\t\t},\n\t\t//Architekt.module.Comparator.stop(): Stops measuring\n\t\tstop: function() {\n\t\t\tendTime = new Date();\n\n\t\t\tresults.push(endTime.getTime() - startTime.getTime());\n\t\t\ttexts.push('Ends');\n\t\t\tconsole.log('Architekt.module.Comparator: Stop perfomance measuring at ' + startTime.toGMTString());\n\n\t\t\treturn this.result();\n\t\t},\n\t\t//Architekt.module.Comparator.check(): Add checkpoint\n\t\tcheck: function(text) {\n\t\t\tvar currentTime = new Date();\n\n\t\t\ttext = typeof text !== 'undefined' ? text : 'Checkpoint';\n\n\t\t\tresults.push(currentTime.getTime() - startTime.getTime());\n\t\t\ttexts.push(text);\n\t\t\tconsole.log('Architekt.module.Comparator: Add checkpoint at ' + startTime.toGMTString());\n\n\t\t\treturn this;\n\t\t},\n\t\t//Architekt.module.Comparator.result(): Get result\n\t\tresult: function() {\n\t\t\tvar resultObject = [];\n\t\t\tfor(var i = 0, len = results.length; i < len; i++)\n\t\t\t\tresultObject.push({\n\t\t\t\t\ttime: results[i],\n\t\t\t\t\tmessage: texts[i]\n\t\t\t\t});\n\n\t\t\treturn resultObject;\n\t\t},\n\t};\n});"],"sourceRoot":"/source/"}